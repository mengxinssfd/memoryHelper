"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../../../utils/util");
var app = getApp();
Page({
    data: {
        isImport: false,
        isUpdate: false,
        questionList: [{
                question: "",
                answer: "",
                desc: "",
            }],
        title: "",
        desc: "",
        memoryObjStr: "",
    },
    setState: (function () { return 0; }),
    onLoad: function (options) {
        var _this = this;
        var sd = this.setData;
        this.setState = sd;
        this.setData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.saveTempMemory();
            console.log("setData...");
            sd.apply(_this, args);
        };
        var type = options.type;
        if (type !== "update") {
            this.getTempMemory();
            return;
        }
        wx.setNavigationBarTitle({ title: "编辑" });
        var memory = wx.getStorageSync("memory") || [];
        var index = app.globalData.currentMemoryIndex;
        var _a = memory[index], questionList = _a.questionList, title = _a.title;
        if (questionList.length > 5) {
            this.splitPushToData(questionList.slice(5));
            questionList = questionList.splice(0, 5);
        }
        sd.call(this, { isUpdate: true, title: title, questionList: questionList });
    },
    saveTempMemory: (function () {
        function save() {
            console.log("缓存表单...");
            var title = this.data.title;
            var questionList = this.data.questionList;
            wx.setStorage({ key: "tempMemory", data: { title: title, questionList: questionList } });
        }
        return util_1.debounce(save, 600);
    })(),
    splitPushToData: function (tempQL) {
        var _this = this;
        var timer = setInterval(function () {
            var questionList = _this.data.questionList;
            Array.prototype.push.apply(questionList, tempQL.splice(0, 10));
            _this.setState({ questionList: questionList });
            if (!tempQL.length) {
                clearInterval(timer);
            }
        }, 100);
    },
    getTempMemory: function () {
        try {
            var temp = wx.getStorageSync("tempMemory");
            if (!temp || !temp.title)
                return;
            var title = temp.title, questionList = temp.questionList;
            if (questionList.length > 5) {
                this.splitPushToData(questionList.slice(5));
                questionList = questionList.splice(0, 5);
            }
            this.setState({ title: title, questionList: questionList });
        }
        catch (e) {
            console.log("getTempMemory error", e);
        }
    },
    bindKeyInput: function (e) {
        var _a, _b;
        var detail = e.detail, target = e.target;
        var value = detail.value;
        var _c = target.dataset, index = _c.index, type = _c.type;
        if (/item\.(\w+)/.test(type)) {
            var obj = this.data.questionList[index];
            obj[RegExp.$1] = value;
            this.setData((_a = {},
                _a["questionList[" + index + "]"] = obj,
                _a));
        }
        else {
            this.setData((_b = {}, _b[type] = value, _b));
        }
    },
    validate: function (title, questionList) {
        if (!title) {
            wx.showToast({ icon: "none", title: "标题不能为空!", duration: 3000 });
            return false;
        }
        for (var i = 0; i < questionList.length; i++) {
            var item = questionList[i];
            if (!item.question) {
                wx.showToast({ icon: "none", title: "\u95EE\u9898" + (i + 1) + "\u4E0D\u80FD\u4E3A\u7A7A!", duration: 3000 });
                return false;
            }
            if (!item.answer) {
                wx.showToast({ icon: "none", title: "\u7B54\u6848" + (i + 1) + "\u4E0D\u80FD\u4E3A\u7A7A!", duration: 3000 });
                return false;
            }
        }
        return true;
    },
    formSubmit: function (e) {
        console.log('form发生了submit事件，携带数据为：', e.detail.value);
        var _a = this.data, title = _a.title, questionList = _a.questionList, isUpdate = _a.isUpdate;
        if (!this.validate(title, questionList))
            return;
        try {
            var key = "memory";
            var memory = wx.getStorageSync(key) || [];
            var obj = { title: title, questionList: questionList };
            if (isUpdate) {
                memory[app.globalData.currentMemoryIndex] = obj;
            }
            else {
                memory.push(obj);
            }
            wx.setStorageSync(key, memory);
            wx.showToast({ icon: "success", title: (isUpdate ? "修改" : "保存") + "\u6210\u529F" });
            setTimeout(function () {
                wx.navigateBack();
                wx.setStorageSync("tempMemory", null);
            }, 1500);
        }
        catch (e) {
        }
    },
    formReset: function (e) {
        console.log('form发生了reset事件，携带数据为：', e.detail.value);
        var questionList = [{
                question: "",
                answer: "",
                desc: "",
            }];
        var title = "";
        if (this.data.isImport) {
            this.setData({
                memoryObjStr: JSON.stringify({ title: title, questionList: questionList }),
            });
        }
        else {
            this.setData({
                questionList: questionList,
                title: title,
            });
        }
    },
    questionListAdd: function () {
        var ml = this.data.questionList;
        ml.push({
            question: "",
            answer: "",
            desc: "",
        });
        this.setData({
            questionList: ml,
        });
    },
    questionListDelete: function (e) {
        var index = e.target.dataset.index;
        console.log(index);
        var ml = this.data.questionList;
        ml.splice(index, 1);
        this.setData({
            questionList: ml,
        });
    },
    memoryImport: function () {
        var _a = this.data, title = _a.title, questionList = _a.questionList;
        this.setData({ isImport: true, memoryObjStr: JSON.stringify({ title: title, questionList: questionList }) });
    },
    memoryExport: function () {
        var _a = this.data, title = _a.title, questionList = _a.questionList;
        var fsm = wx.getFileSystemManager();
        var filePath = wx.env.USER_DATA_PATH + "/" + title + ".json";
        fsm.writeFile({
            filePath: filePath,
            data: JSON.stringify({ title: title, questionList: questionList }),
            encoding: "utf-8",
            success: function () {
                wx.showToast({ icon: "none", title: "保存成功" });
                wx.openDocument({ filePath: filePath });
            },
            fail: function (res) {
                console.log(res);
                wx.showToast({ icon: "none", title: "保存失败" });
            },
        });
    },
    back: function () {
        this.setData({ isImport: false });
    },
    confirm: function () {
        var memoryObjStr = this.data.memoryObjStr;
        try {
            var obj = JSON.parse(memoryObjStr);
            if (this.validate(obj.title, obj.questionList)) {
                if (obj.questionList.length > 5) {
                    this.splitPushToData(obj.questionList.slice(5));
                    obj.questionList = obj.questionList.splice(0, 5);
                }
                this.setData(__assign({ isImport: false }, obj));
            }
        }
        catch (e) {
            wx.showToast({ icon: "none", title: "1111111" });
        }
    },
    fileImport: function () {
        var _this = this;
        wx.chooseMessageFile({
            count: 1,
            type: "file",
            extension: ["json", "txt"],
            success: function (res) {
                console.log(res.tempFiles[0]);
                wx.getFileSystemManager().readFile({
                    filePath: res.tempFiles[0].path,
                    encoding: "utf-8",
                    success: function (e) {
                        var value = e.data;
                        console.log("读取到文件：");
                        console.log(value);
                        try {
                            var obj = JSON.parse(value);
                            if (!value || !_this.validate(obj.title, obj.questionList)) {
                                wx.showToast({ icon: "none", title: "文件格式不正确" });
                                return;
                            }
                            _this.setData({ memoryObjStr: value });
                        }
                        catch (e) {
                            wx.showToast({ icon: "none", title: "文件格式不对" });
                        }
                    },
                });
            },
        });
    },
    onInputEdit: function (e) {
        var value = e.detail.value;
        this.setState({ memoryObjStr: value });
    },
});
//# sourceMappingURL=data:application/json;base64,