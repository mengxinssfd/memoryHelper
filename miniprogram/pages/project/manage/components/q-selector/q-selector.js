"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
Component({
    properties: {
        questionList: {
            type: Array,
            value: [],
        },
    },
    data: {
        qList: [],
        selectCount: 0,
    },
    lifetimes: {
        attached: function () {
            this.setData({
                qList: this.data.questionList,
            });
            this.setSelectCount(this.data.questionList);
        },
        detached: function () {
        },
    },
    observers: {
        "qList": function (a) {
            this.setSelectCount(a);
        },
    },
    methods: {
        setSelectCount: function (qList) {
            if (!qList)
                qList = this.data.qList;
            var count = qList.filter(function (i) { return !i.isUnChecked; }).length;
            this.setData({ selectCount: count });
        },
        bindCheckedChange: function (e) {
            var index = e.currentTarget.dataset.index;
            var qList = this.data.qList;
            var currentQues = qList[index];
            currentQues.isUnChecked = !currentQues.isUnChecked;
            qList[index] = currentQues;
            this.setData({
                qList: qList,
            });
        },
        onTapCheckAll: function (e) {
            var qList = this.data.qList;
            var map = { all: false, clear: true };
            var type = e.currentTarget.dataset.type;
            var isUnChecked = map[type];
            var newList = qList.map(function (item) {
                var newItem = __assign({}, item);
                newItem.isUnChecked = isUnChecked;
                return newItem;
            });
            this.setData({
                qList: newList,
            });
        },
        onTapSelectMark: function (e) {
            var qList = this.data.qList;
            var map = { all: false, clear: true };
            var type = e.currentTarget.dataset.type;
            var isUnChecked = map[type];
            var newList = qList.map(function (item) {
                var newItem = __assign({}, item);
                if (item.isMark) {
                    newItem.isUnChecked = isUnChecked;
                }
                return newItem;
            });
            this.setData({
                qList: newList,
            });
        },
        onTapReverse: function () {
            var qList = this.data.qList;
            var newList = qList.map(function (item) {
                var newItem = __assign({}, item);
                newItem.isUnChecked = !newItem.isUnChecked;
                return newItem;
            });
            this.setData({
                qList: newList,
            });
        },
        onOk: function () {
            this.triggerEvent("finish", this.data.qList);
            this.onBack();
        },
        onBack: function () {
            this.triggerEvent("close");
        },
    },
});
//# sourceMappingURL=data:application/json;base64,