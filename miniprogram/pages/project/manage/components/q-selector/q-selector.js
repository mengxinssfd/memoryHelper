"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
Component({
    properties: {
        questionList: {
            type: Array,
            value: []
        }
    },
    data: {
        qList: []
    },
    lifetimes: {
        attached: function () {
            this.setData({
                qList: this.data.questionList
            });
        },
        detached: function () {
        },
    },
    methods: {
        bindCheckedChange: function (e) {
            var _a;
            var index = e.currentTarget.dataset.index;
            var qList = this.data.qList;
            var currentQues = qList[index];
            currentQues.isUnChecked = !currentQues.isUnChecked;
            this.setData((_a = {},
                _a["qList[" + index + "]"] = currentQues,
                _a));
        },
        bindCheckAll: function (e) {
            var qList = this.data.qList;
            var map = { all: false, clear: true };
            var type = e.currentTarget.dataset.type;
            var isUnChecked = map[type];
            qList.forEach(function (item) {
                item.isUnChecked = isUnChecked;
            });
            this.setData({
                qList: qList
            });
        },
        onOk: function () {
            this.triggerEvent("finish", this.data.qList);
            this.onBack();
        },
        onBack: function () {
            this.triggerEvent("close");
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicS1zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInEtc2VsZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxTQUFTLENBQUM7SUFDTixVQUFVLEVBQUU7UUFDUixZQUFZLEVBQUU7WUFDVixJQUFJLEVBQUUsS0FBSztZQUNYLEtBQUssRUFBRSxFQUFFO1NBQ1o7S0FDSjtJQUNELElBQUksRUFBRTtRQUNGLEtBQUssRUFBc0IsRUFBRTtLQUNoQztJQUNELFNBQVMsRUFBRTtRQUNQLFFBQVEsRUFBRTtZQUNOLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1QsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWTthQUNoQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBQ0QsUUFBUSxFQUFFO1FBRVYsQ0FBQztLQUNKO0lBQ0QsT0FBTyxFQUFFO1FBQ0wsaUJBQWlCLEVBQUUsVUFBUyxDQUFNOztZQUM5QixJQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDckMsSUFBQSx1QkFBSyxDQUFjO1lBQzFCLElBQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqQyxXQUFXLENBQUMsV0FBVyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQztZQUNuRCxJQUFJLENBQUMsT0FBTztnQkFDUixHQUFDLFdBQVMsS0FBSyxNQUFHLElBQUcsV0FBVztvQkFDbEMsQ0FBQztRQUNQLENBQUM7UUFFRCxZQUFZLEVBQUUsVUFBUyxDQUFNO1lBQ2xCLElBQUEsdUJBQUssQ0FBYztZQUMxQixJQUFNLEdBQUcsR0FBRyxFQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO1lBQ3RDLElBQU0sSUFBSSxHQUFxQixDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDNUQsSUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO2dCQUNkLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDVCxLQUFLLE9BQUE7YUFDUixDQUFDLENBQUM7UUFDUCxDQUFDO1FBQ0QsSUFBSSxFQUFFO1lBRUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEIsQ0FBQztRQUNELE1BQU0sRUFBRTtZQUNKLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQztLQUNKO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtRdWVzdGlvbkxpc3RJdGVtfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vdXRpbHMvdXRpbFwiO1xyXG5cclxuQ29tcG9uZW50KHtcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBxdWVzdGlvbkxpc3Q6IHtcclxuICAgICAgICAgICAgdHlwZTogQXJyYXksXHJcbiAgICAgICAgICAgIHZhbHVlOiBbXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgcUxpc3Q6IDxRdWVzdGlvbkxpc3RJdGVtW10+W11cclxuICAgIH0sXHJcbiAgICBsaWZldGltZXM6IHtcclxuICAgICAgICBhdHRhY2hlZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICBxTGlzdDogdGhpcy5kYXRhLnF1ZXN0aW9uTGlzdFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRldGFjaGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8g5Zyo57uE5Lu25a6e5L6L6KKr5LuO6aG16Z2i6IqC54K55qCR56e76Zmk5pe25omn6KGMXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgYmluZENoZWNrZWRDaGFuZ2U6IGZ1bmN0aW9uKGU6IGFueSkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG4gICAgICAgICAgICBjb25zdCB7cUxpc3R9ID0gdGhpcy5kYXRhO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UXVlcyA9IHFMaXN0W2luZGV4XTtcclxuICAgICAgICAgICAgY3VycmVudFF1ZXMuaXNVbkNoZWNrZWQgPSAhY3VycmVudFF1ZXMuaXNVbkNoZWNrZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICBbYHFMaXN0WyR7aW5kZXh9XWBdOiBjdXJyZW50UXVlc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIOWFqOmAieaIluWFqOS4jemAiVxyXG4gICAgICAgIGJpbmRDaGVja0FsbDogZnVuY3Rpb24oZTogYW55KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtxTGlzdH0gPSB0aGlzLmRhdGE7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hcCA9IHthbGw6IGZhbHNlLCBjbGVhcjogdHJ1ZX07XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGU6IGtleW9mIHR5cGVvZiBtYXAgPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC50eXBlO1xyXG4gICAgICAgICAgICBjb25zdCBpc1VuQ2hlY2tlZCA9IG1hcFt0eXBlXTtcclxuICAgICAgICAgICAgcUxpc3QuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uaXNVbkNoZWNrZWQgPSBpc1VuQ2hlY2tlZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICBxTGlzdFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uT2s6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyDnrKzkuozkuKrlj4LmlbDmmK9kZXRhaWxcclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoXCJmaW5pc2hcIiwgdGhpcy5kYXRhLnFMaXN0KTtcclxuICAgICAgICAgICAgdGhpcy5vbkJhY2soKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQmFjazogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KFwiY2xvc2VcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuIl19