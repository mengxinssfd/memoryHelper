"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../../../utils/util");
Component({
    properties: {
        questionList: {
            type: Array,
            value: [],
        },
        setting: {
            type: Object,
            value: {},
        },
    },
    data: {
        title: "",
        qList: [],
        currentQuestion: {},
        inputValue: "",
        isShowAnswer: false,
        isRightRemove: false,
    },
    lifetimes: {
        attached: function () {
            this.init();
        },
        detached: function () {
            this.onHide();
        },
    },
    pageLifetimes: {
        hide: function () {
        },
    },
    methods: {
        init: function () {
            var _this = this;
            var qList = this.data.questionList.filter(function (item) { return !item.isUnChecked; });
            if (!qList.length) {
                wx.showModal({
                    title: '提示',
                    content: '请至少勾选一个',
                    success: function (res) {
                        if (res.confirm) {
                            console.log('用户点击确定');
                        }
                        else if (res.cancel) {
                            console.log('用户点击取消');
                        }
                        _this.onTapMask();
                    },
                });
                return false;
            }
            this.setData({ qList: qList }, function () {
                _this.switchQuestion();
            });
            return true;
        },
        onHide: function () {
            this.triggerEvent("finish", this.data.questionList);
        },
        onTapMask: function () {
            this.triggerEvent('close');
        },
        onTapConfirm: function () {
            var _this = this;
            var _a = this.data, inputValue = _a.inputValue, qList = _a.qList, currentQuestion = _a.currentQuestion, setting = _a.setting, isRightRemove = _a.isRightRemove;
            var answer = currentQuestion.answer, question = currentQuestion.question;
            var value = setting.isReverse ? question : answer;
            if (setting.ignoreUpLow) {
                value = value.toLowerCase();
                inputValue = inputValue.toLowerCase();
            }
            if (value === inputValue) {
                wx.showToast({ icon: "success", title: "回答正确", duration: 700 });
                if (isRightRemove) {
                    var questionList = this.data.questionList;
                    var index = questionList.findIndex(function (item) { return item.question === question; });
                    currentQuestion.isUnChecked = true;
                    questionList[index] = currentQuestion;
                    if (!this.init()) {
                        return;
                    }
                }
                if (qList.length) {
                    this.switchQuestion();
                }
                else {
                    console.log("回答完毕");
                    wx.showModal({
                        title: "提示",
                        content: "是否重来？",
                        success: function () {
                            _this.init();
                        },
                    });
                }
            }
            else {
                wx.showToast({ icon: "none", title: "回答错误" });
                this.setData({ inputValue: "" });
            }
        },
        switchQuestion: function (pushItem) {
            var qList = this.data.qList;
            var randIndex = util_1.randomNumber(qList.length - 1);
            if (!qList.length) {
                wx.showToast({ icon: "none", title: "没有可切换的问题" });
                return;
            }
            var cq = qList.splice(randIndex, 1)[0];
            if (pushItem) {
                qList.push(pushItem);
            }
            this.setData({ inputValue: "", currentQuestion: cq, qList: qList, isShowAnswer: false });
        },
        onTapJump: function () {
            var currentQuestion = this.data.currentQuestion;
            this.switchQuestion(currentQuestion);
        },
        onTapShowAnswer: function () {
            this.setData({ isShowAnswer: !this.data.isShowAnswer });
        },
    },
});
//# sourceMappingURL=data:application/json;base64,