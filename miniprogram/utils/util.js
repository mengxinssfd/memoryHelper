"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatTime = function (date) {
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    var second = date.getSeconds();
    return ([year, month, day].map(formatNumber).join('/') +
        ' ' +
        [hour, minute, second].map(formatNumber).join(':'));
};
var formatNumber = function (n) {
    var s = n.toString();
    return s[1] ? s : '0' + s;
};
function debounce(callback, delay) {
    var timer = null;
    return function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (timer) {
            clearTimeout(timer);
            timer = null;
        }
        timer = setTimeout(function () {
            timer = null;
            callback.apply(_this, args);
        }, delay);
    };
}
exports.debounce = debounce;
function forEachByLen(len, callback) {
    for (var i = 0; i < len; i++) {
        if (callback(i) !== false)
            continue;
        break;
    }
}
exports.forEachByLen = forEachByLen;
function randomNumber(start, end, length) {
    if (!arguments.length)
        return Math.random();
    if (arguments.length === 1) {
        end = start;
        start = 0;
    }
    if (length === undefined) {
        var len = end - start + 1;
        return ~~(Math.random() * len) + start;
    }
    else {
        var arr_1 = [];
        forEachByLen(length, function () { return arr_1.push(randomNumber(start, end)); });
        return arr_1;
    }
}
exports.randomNumber = randomNumber;
function getUUID(length) {
    var uuidArr = [];
    var hexDigits = "0123456789abcdef";
    for (var i = 0; i < length; i++) {
        uuidArr[i] = hexDigits.substr(Math.random() * 0x10, 1);
    }
    uuidArr[14] = "4";
    uuidArr[19] = hexDigits.substr((uuidArr[19] & 0x3) | 0x8, 1);
    return uuidArr.join("");
}
exports.getUUID = getUUID;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBYSxRQUFBLFVBQVUsR0FBRyxVQUFDLElBQVU7SUFDakMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEMsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzNCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRWpDLE9BQU8sQ0FDSCxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDOUMsR0FBRztRQUNILENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUNyRCxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsSUFBTSxZQUFZLEdBQUcsVUFBQyxDQUFTO0lBQzNCLElBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLFNBQWdCLFFBQVEsQ0FBQyxRQUFrQyxFQUFFLEtBQWE7SUFDdEUsSUFBSSxLQUFLLEdBQVEsSUFBSSxDQUFDO0lBQ3RCLE9BQU87UUFBQSxpQkFTTjtRQVQwQixjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUNyQyxJQUFJLEtBQUssRUFBRTtZQUNQLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQixLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ2hCO1FBQ0QsS0FBSyxHQUFHLFVBQVUsQ0FBQztZQUNmLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDYixRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDZCxDQUFDLENBQUM7QUFDTixDQUFDO0FBWkQsNEJBWUM7QUFHRCxTQUFnQixZQUFZLENBQUMsR0FBVyxFQUFFLFFBQXdDO0lBQzlFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUIsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSztZQUFFLFNBQVM7UUFDcEMsTUFBTTtLQUNUO0FBQ0wsQ0FBQztBQUxELG9DQUtDO0FBVUQsU0FBZ0IsWUFBWSxDQUFDLEtBQVcsRUFBRSxHQUFTLEVBQUUsTUFBWTtJQUU3RCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07UUFBRSxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUU1QyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3hCLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDWixLQUFLLEdBQUcsQ0FBQyxDQUFDO0tBQ2I7SUFHRCxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7UUFDdEIsSUFBTSxHQUFHLEdBQUksR0FBYyxHQUFJLEtBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFJLEtBQWdCLENBQUM7S0FDdEQ7U0FBTTtRQUVILElBQU0sS0FBRyxHQUFhLEVBQUUsQ0FBQztRQUN6QixZQUFZLENBQUMsTUFBTSxFQUFFLGNBQU0sT0FBQSxLQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBbEMsQ0FBa0MsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sS0FBRyxDQUFDO0tBQ2Q7QUFDTCxDQUFDO0FBbkJELG9DQW1CQztBQU9ELFNBQWdCLE9BQU8sQ0FBQyxNQUFjO0lBQ2xDLElBQU0sT0FBTyxHQUFhLEVBQUUsQ0FBQztJQUM3QixJQUFNLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztJQUNyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDMUQ7SUFDRCxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBUyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV0RSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQVZELDBCQVVDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGZvcm1hdFRpbWUgPSAoZGF0ZTogRGF0ZSkgPT4ge1xuICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgY29uc3QgbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICAgIGNvbnN0IGRheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgIGNvbnN0IGhvdXIgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgY29uc3QgbWludXRlID0gZGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgY29uc3Qgc2Vjb25kID0gZGF0ZS5nZXRTZWNvbmRzKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICBbeWVhciwgbW9udGgsIGRheV0ubWFwKGZvcm1hdE51bWJlcikuam9pbignLycpICtcbiAgICAgICAgJyAnICtcbiAgICAgICAgW2hvdXIsIG1pbnV0ZSwgc2Vjb25kXS5tYXAoZm9ybWF0TnVtYmVyKS5qb2luKCc6JylcbiAgICApO1xufTtcblxuY29uc3QgZm9ybWF0TnVtYmVyID0gKG46IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHMgPSBuLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHNbMV0gPyBzIDogJzAnICsgcztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkLCBkZWxheTogbnVtYmVyKSB7XG4gICAgbGV0IHRpbWVyOiBhbnkgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbih0aGlzOiBhbnksIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgIGlmICh0aW1lcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICB9O1xufVxuXG4vLyDku6Pmm79mb3Llvqrnjq9cbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoQnlMZW4obGVuOiBudW1iZXIsIGNhbGxiYWNrOiAoaW5kZXg6IG51bWJlcikgPT4gYW55IHwgZmFsc2UpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayhpKSAhPT0gZmFsc2UpIGNvbnRpbnVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG59XG5cbi8vIHN0YXJ0IGVuZOmDveS4jeS8oCAgcmV0dXJuIE1hdGgucmFuZG9tKClcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21OdW1iZXIoKTogbnVtYmVyXG4vLyBzdGFydCA9IDAg55Sf5oiQMC1lbmTkuYvpl7TnmoTpmo/mnLrmlbBcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21OdW1iZXIoZW5kOiBudW1iZXIpOiBudW1iZXJcbi8vIOeUn+aIkHN0YXJ05YiwZW5k5LmL6Ze055qE6ZqP5py65pWwIOWMheWQq3N0YXJ05LiOZW5kXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tTnVtYmVyKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogbnVtYmVyXG4vLyDnlJ/miJBzdGFydOWIsGVuZOS5i+mXtOeahOmaj+acuuaVsOe7hCDljIXlkKtzdGFydOS4jmVuZCBsZW5ndGjvvJrmlbDnu4Tplb/luqZcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21OdW1iZXIoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogbnVtYmVyW11cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21OdW1iZXIoc3RhcnQ/OiBhbnksIGVuZD86IGFueSwgbGVuZ3RoPzogYW55KSB7XG4gICAgLy8gcmFuZG9tTnVtYmVyKClcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnJhbmRvbSgpO1xuICAgIC8vIHJhbmRvbU51bWJlcihlbmQpXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG5cbiAgICAvLyByYW5kb21OdW1iZXIoc3RhcnQsIGVuZClcbiAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgbGVuID0gKGVuZCBhcyBudW1iZXIpIC0gKHN0YXJ0IGFzIG51bWJlcikgKyAxO1xuICAgICAgICByZXR1cm4gfn4oTWF0aC5yYW5kb20oKSAqIGxlbikgKyAoc3RhcnQgYXMgbnVtYmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyByYW5kb21OdW1iZXIoc3RhcnQsIGVuZCwgbGVuZ3RoKVxuICAgICAgICBjb25zdCBhcnI6IG51bWJlcltdID0gW107XG4gICAgICAgIGZvckVhY2hCeUxlbihsZW5ndGgsICgpID0+IGFyci5wdXNoKHJhbmRvbU51bWJlcihzdGFydCwgZW5kKSkpO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH1cbn1cblxuLyoqXG4gKiDnlJ/miJDkuI3ph43lpI3nmoTlrZfnrKbkuLJcbiAqIEBwYXJhbSBsZW5ndGhcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVVUlEKGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCB1dWlkQXJyOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IGhleERpZ2l0cyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXVpZEFycltpXSA9IGhleERpZ2l0cy5zdWJzdHIoTWF0aC5yYW5kb20oKSAqIDB4MTAsIDEpO1xuICAgIH1cbiAgICB1dWlkQXJyWzE0XSA9IFwiNFwiOyAgLy8gYml0cyAxMi0xNSBvZiB0aGUgdGltZV9oaV9hbmRfdmVyc2lvbiBmaWVsZCB0byAwMDEwXG4gICAgdXVpZEFyclsxOV0gPSBoZXhEaWdpdHMuc3Vic3RyKCgodXVpZEFyclsxOV0gYXMgYW55KSAmIDB4MykgfCAweDgsIDEpOyAgLy8gYml0cyA2LTcgb2YgdGhlIGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWQgdG8gMDFcblxuICAgIHJldHVybiB1dWlkQXJyLmpvaW4oXCJcIik7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBRdWVzdGlvbkxpc3RJdGVtIHtcbiAgICBxdWVzdGlvbjogc3RyaW5nLFxuICAgIGFuc3dlcjogc3RyaW5nLFxuICAgIGRlc2M/OiBzdHJpbmcsXG4gICAgaXNVbkNoZWNrZWQ/OiBib29sZWFuLFxuICAgIGlzTWFyaz86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZW1vcnkge1xuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgZGVzYz86IHN0cmluZyxcbiAgICBxdWVzdGlvbkxpc3Q6IFF1ZXN0aW9uTGlzdEl0ZW1bXSxcbiAgICBjcmVhdGVUaW1lOiBzdHJpbmcsXG4gICAgdXBkYXRlVGltZTogc3RyaW5nLFxuICAgIHV1aWQ6IHN0cmluZyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQbGF5U2V0dGluZyB7XG4gICAgY2FuSnVtcDogYm9vbGVhbixcbiAgICBjYW5TaG93QW5zd2VyOiBib29sZWFuLFxuICAgIGlzUmV2ZXJzZTogYm9vbGVhbixcbiAgICB0aW1lPzogbnVtYmVyLFxuICAgIHRvdGFsVGltZT86IG51bWJlcixcbn0iXX0=