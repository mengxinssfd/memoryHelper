"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function formatTime(date, format) {
    if (format === void 0) { format = "yyyy-MM-dd hh:mm:ss"; }
    var obj = {
        "y+": date.getFullYear(),
        "M+": date.getMonth() + 1,
        "d+": date.getDate(),
        "h+": date.getHours(),
        "m+": date.getMinutes(),
        "s+": date.getSeconds(),
    };
    for (var k in obj) {
        if (new RegExp("(" + k + ")").test(format)) {
            var s1 = RegExp.$1;
            var value = strPadStart(String(obj[k]), s1.length, "0");
            value = value.substr(value.length - s1.length);
            format = format.replace(s1, value);
        }
    }
    return format;
}
exports.formatTime = formatTime;
function dateDiff(start, end, format) {
    if (format === void 0) { format = "y年d天 h时m分s秒"; }
    var seconds = ~~((end.getTime() - start.getTime()) / 1000);
    var obj = {
        "s+": seconds % 60,
        "m+": ~~(seconds / 60) % 60,
        "h+": ~~(seconds / (60 * 60)) % 24,
        "d+": (function () {
            var day = ~~(seconds / (60 * 60 * 24));
            return /y+/.test(format) ? day % 365 : day;
        })(),
        "y+": ~~(seconds / (60 * 60 * 24 * 365)),
    };
    for (var k in obj) {
        if (new RegExp("(" + k + ")").test(format)) {
            var s1 = RegExp.$1;
            var value = strPadStart(String(obj[k]), s1.length, "0");
            value = value.substr(value.length - s1.length);
            format = format.replace(s1, value);
        }
    }
    return format;
}
exports.dateDiff = dateDiff;
function strPadStart(target, len, fill) {
    if (target.length >= len)
        return target;
    var lessLen = len - target.length;
    while (fill.length < lessLen) {
        fill += fill;
    }
    fill = fill.substr(0, lessLen);
    return fill + target;
}
exports.strPadStart = strPadStart;
function debounce(callback, delay) {
    var timer = null;
    return function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (timer) {
            clearTimeout(timer);
            timer = null;
        }
        timer = setTimeout(function () {
            timer = null;
            callback.apply(_this, args);
        }, delay);
    };
}
exports.debounce = debounce;
function forEachByLen(len, callback) {
    for (var i = 0; i < len; i++) {
        if (callback(i) !== false)
            continue;
        break;
    }
}
exports.forEachByLen = forEachByLen;
function randomNumber(start, end, length) {
    if (!arguments.length)
        return Math.random();
    if (arguments.length === 1) {
        end = start;
        start = 0;
    }
    if (length === undefined) {
        var len = end - start + 1;
        return ~~(Math.random() * len) + start;
    }
    else {
        var arr_1 = [];
        forEachByLen(length, function () { return arr_1.push(randomNumber(start, end)); });
        return arr_1;
    }
}
exports.randomNumber = randomNumber;
function getUUID(length) {
    var uuidArr = [];
    var hexDigits = "0123456789abcdef";
    for (var i = 0; i < length; i++) {
        uuidArr[i] = hexDigits.substr(Math.random() * 0x10, 1);
    }
    uuidArr[14] = "4";
    uuidArr[19] = hexDigits.substr((uuidArr[19] & 0x3) | 0x8, 1);
    return uuidArr.join("");
}
exports.getUUID = getUUID;
//# sourceMappingURL=data:application/json;base64,